#include <iostream>#include <ostream>struct QueInfo {  int val, priority;  QueInfo(int val = 0, int priority = 0):val(val), priority(priority) {};};class PairVector {  // e un vector alocat dinamic ca si cel din STL  // operatii de push_back, pop_back, accesare element in O(1)  QueInfo *v;  int N, capacity; public:  int size();  void reserve(int cap);  PairVector() {	  capacity = 1;	  N = 0;	  v = new QueInfo[1];  }  PairVector(int size) {	  reserve(size);  }  QueInfo& operator[] (int poz) {	  return v[poz];  }  void operator=(const PairVector &that);    void push_back(QueInfo x);  void pop_back();  QueInfo back();  bool empty();  ~PairVector() {	  delete[] v;  }};class PQueue {  int lazy;  PairVector que; public:  int getSize();    PQueue() {    lazy = 0;  }  void add(QueInfo x, bool merging);  void remove(int x) ;  int maxPriority();  int maxValue() ;  int realPrio(int at);  QueInfo with_lazy(int at);void operator++();  void operator--() ;  PQueue operator+(PQueue that);};std::ostream& operator<< (std::ostream &out, PQueue& a);